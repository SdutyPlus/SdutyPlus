buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'java'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.d205.sdutyplus'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	// lobback 과 Log4j2 충돌방지
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}
//jasypt
test{
	systemProperty "jasypt.encryptor.password", System.getProperties().get("jasypt.encryptor.password")
}

repositories {
	mavenCentral()
}

dependencies {
	//Logger
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// swagger dependency
	implementation "io.springfox:springfox-boot-starter:3.0.0"
	implementation "io.springfox:springfox-swagger-ui:3.0.0"
	//json parsing
	implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
	//jwt
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
	//security
	implementation group: 'org.springframework.security', name: 'spring-security-core', version: '5.7.3'
	implementation group: 'org.springframework.security', name: 'spring-security-config', version: '5.7.3'
	implementation group: 'org.springframework.security', name: 'spring-security-web', version: '5.7.3'

	//querydsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	//implementation "com.querydsl:querydsl-jpa"
	//implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
	// https://mvnrepository.com/artifact/javax.inject/javax.inject
	implementation group: 'javax.inject', name: 'javax.inject', version: '1'

	//validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//firebase
	implementation group: 'com.google.firebase', name: 'firebase-admin', version: '8.1.0'

	//jsp
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	implementation 'javax.servlet:jstl'

	//jasypt
	implementation group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '3.0.4'
}

//querydsl start
def querydslDir = "$buildDir/generated/querydsl"
//def querydslDir = 'src/main/generated'

querydsl {
	library = "com.querydsl:querydsl-apt"
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', querydslDir]
		}
	}
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl.doFirst {
	if(file(querydslDir).exists())
		delete(file(querydslDir))
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
	options.encoding = 'UTF-8'
}

//querydsl end

tasks.named('test') {
	useJUnitPlatform()
}